// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  email     String      @unique
  username  String      @unique
  password  String
  avatar    String?
  createdAt DateTime    @default(now())
  posts     Post[]
  savedPost savedPost[]
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  price     Float // Changed to Float to handle decimal prices
  images    String[]
  address   String
  city      String
  location  String? // Added location field (neighborhood, district, etc.)
  bedroom   Int
  bathroom  Int
  latitude  Float
  longitude Float
  type      Type
  property  Property

  createdAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.ObjectId
  postDetail PostDetail?
  savedPost  savedPost[]
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  land
}

model PostDetail {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  desc       String
  utilities  String
  pet        String
  income     Float // Changed to Float to handle larger income values
  size       Float // Changed to Float to handle decimal square footage
  school     Float // Changed to Float for more precise distances
  bus        Float // Changed to Float for more precise distances
  restaurant Float // Changed to Float for more precise distances
  post       Post   @relation(fields: [postId], references: [id])
  postId     String @unique @db.ObjectId
}

model savedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}
